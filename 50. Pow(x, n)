//纯数学解法，4ms，6.8M内存
double myPow(double x, int n){
    bool sign = n<0?0:1;
    if(x==1) return 1;
    if(x==-1){
        return n%2==1?-1:1;
    }
    if(n==0) return 1;
    long long nn = n;
    nn = nn<0?-nn:nn;
    double result = 1.f;
    if(!sign) x=1.f/x;
    while(nn--) {
        //printf("%lf,%lf\n",x,result);
        if(fabs(result)<1e-32) return 0;
        result*=x;
    }
    return result;
}

//0ms 递归解法 
double myPow(double x, int n){  
   if(n == 0)
     return 1;
   double t = myPow(x, n/2);
   if(n % 2 == 0)
        return t*t;
   else{
      if(n > 0)
         return x*t*t;
      else 
        return (t*t) / x;
  }
}
