//700ms 12.6M 尚未优化的写法
class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        row = len(matrix)
        if row ==0:
            return 0
        col = len(matrix[0])
        if col ==0:
            return 0
        cache = [[]]*row
        for i in range(0,row):
            cache[i] = [0]*col
        dic_r = [[1,0],[0,1],[-1,0],[0,-1]]
        def helper(x,y,in_num):
            if x>=0 and x<row and y>=0 and y<col and matrix[x][y]>in_num:
                if cache[x][y]!=0:
                    return cache[x][y]+1
                for i in dic_r:
                    if x+i[0]<row and x+i[0]>=0 and y+i[1]>=0 and y+i[1]<col:
                        cache[x][y] = max(cache[x][y],helper(x+i[0],y+i[1],matrix[x][y]))
                return cache[x][y]+1
            return 1
            pass
        max_len = 1
        for i in range(0,row):
            for j in range(0,col):
                for k in dic_r:
                    cache[i][j] = max(cache[i][j],helper(i+k[0],j+k[1],matrix[i][j]))
            #print(cache[i],matrix[i])
            max_len = max(max_len,max(cache[i]))
        return max_len

//276ms 12.4M 优化写法
class Solution(object):
    def longestIncreasingPath(self, matrix):
        h = len(matrix)
        if h == 0: return 0
        w = len(matrix[0])
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i - 1, j) if i and val > matrix[i - 1][j] else 0,
                    dfs(i + 1, j) if i < h - 1 and val > matrix[i + 1][j] else 0,
                    dfs(i, j - 1) if j and val > matrix[i][j - 1] else 0,
                    dfs(i, j + 1) if j < w - 1 and val > matrix[i][j + 1] else 0)
            return dp[i][j]
        
        dp = [[0] * w for x in range(h)]
        for x in range(h):
            for y in range(w):
                if not dp[x][y]:
                    dp[x][y] = dfs(x, y)
        return max([max(x) for x in dp])
