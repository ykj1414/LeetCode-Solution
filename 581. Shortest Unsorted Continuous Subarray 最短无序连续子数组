// 36ms AC 9.6M 使用快排然后比对各位置元素是否相等。
int cmpType(const void *a,const void *b){
    return *(int*)a-*(int*)b;
}
int findUnsortedSubarray(int* nums, int numsSize){
    if(numsSize<=1) return 0;
    int s = 0,e = numsSize-1;
    int *nn = (int*)malloc(sizeof(int)*numsSize);
    memcpy(nn,nums,numsSize*sizeof(int));
    qsort(nn,numsSize,sizeof(nums[0]),cmpType);
    for(;s<e;){
        if(nums[s]==nn[s]) s++;
        if(nums[e]==nn[e]) e--;
        if(nums[s]!=nn[s]&&nums[e]!=nn[e]) break;
    }
    free(nn);
    return e-s==0?0:e-s+1;
}

//24ms 8.2M 找到两个端点，然后遍历出最大最小值，再向两侧遍历的方法

int findUnsortedSubarray(int* nums, int numsSize) {
    int min,max;
    int start=0,end=numsSize-1;
    if(numsSize<=1)
        return 0;
    for(;start<numsSize-1&&nums[start]<=nums[start+1];start++);
    for(;end>=start&&nums[end-1]<=nums[end];end--);
    min=nums[start],max=nums[start];
    for(int i=start;i<=end;i++){
        if(min>nums[i])
        min=nums[i];
        if(max<nums[i])
        max=nums[i];
    }
    for(;start-1>=0&&nums[start-1]>min;start--);
    for(;end+1<numsSize&&nums[end+1]<max;end++);
    return (end-start+1);
}
