int compareType(const void*a,const void*b){
    return *(int*)a-*(int*)b;
}

int maximumProduct(int* nums, int numsSize) {
    //if(numsSize==3) return nums[0]*nums[1]*nums[2];
    qsort(nums,numsSize,sizeof(nums[0]),compareType);
    if(nums[numsSize-1]==0) return 0;
    else if(nums[numsSize-1]<0) return nums[numsSize-1]*nums[numsSize-2]*nums[numsSize-3];
    else if(nums[numsSize-2]<=0) return nums[0]*nums[1]*nums[numsSize-1];
    else if(nums[numsSize-3]==0) return 0;
    else if(nums[numsSize-3]<0) {
        int a = nums[numsSize-1]*nums[numsSize-2]*nums[numsSize-3];
        int b = nums[numsSize-4]*nums[numsSize-2]*nums[numsSize-3];
        int c = nums[numsSize-4]*nums[numsSize-5]*nums[numsSize-3];
        b = b<c?c:b;
        return a>b?a:b;
    }
    else{
        int a = nums[numsSize-1]*nums[numsSize-2]*nums[numsSize-3];
        int b = nums[numsSize-1]*nums[0]*nums[1];
        return a>b?a:b;
    }
}

//12ms AC
int maximumProduct(int* nums, int numsSize) {
	int m1 = INT_MIN, m2 = INT_MIN, m3 = INT_MIN, n1 = INT_MAX, n2 = INT_MAX;
	for (int i = 0; i < numsSize; i++)
	{
		if (m3 < nums[i])
		{
			m1 = m2;
			m2 = m3;
			m3 = nums[i];
		}
		else if (m2 < nums[i])
		{
			m1 = m2;
			m2 = nums[i];
		}
		else if (m1 < nums[i])
		{
			m1 = nums[i];
		}
		if (n1 > nums[i])
		{
			n2 = n1;
			n1 = nums[i];
		}
		else if (n2 > nums[i])
		{
			n2 = nums[i];
		}
	}
	int r1 = m1 * m2 * m3;
	int r2 = n1 * n2 * m3;
	return r1 > r2 ? r1 : r2;
}
