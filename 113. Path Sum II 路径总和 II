//64ms DFS暴力解法
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        res = []
        self.helper(root,sum,[],res)
        return res
        
    def helper(self,root,sum,cur_res,res):
        if not root:
            return
        cur = []
        for i in cur_res:
            cur.append(i)
            pass
        cur.append(root.val)
        sum-=root.val
        if(root.left==None and root.right==None):
            if(sum==0):
                res.append(cur)
            return
        else:
            self.helper(root.left,sum,cur,res)
            self.helper(root.right,sum,cur,res)
            
   //66ms python3写法 注意其中tmp列表传递的时候是值传递
   class Solution:
    def pathSum(self, root: TreeNode, sum_: int) -> List[List[int]]:
        def helper(root, tmp, sum_):
            if not root:
                return 
            if not root.left and not root.right and sum_ - root.val == 0:
                tmp += [root.val]
                res.append(tmp)
            helper(root.left, tmp + [root.val], sum_ - root.val)
            helper(root.right, tmp + [root.val], sum_ - root.val)
        res = []
        helper(root, [], sum_)
        return res
