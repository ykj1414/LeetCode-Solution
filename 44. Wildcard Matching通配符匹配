//36ms 动态规划法


bool isMatch(char * s, char * p){
    int lenp = strlen(p);
    int lens = strlen(s);
    bool **res = (bool**)malloc(sizeof(bool*)*(lens+1));
    for(int i = 0;i<lens+1;i++) res[i] = (bool*)calloc(lenp+1,sizeof(bool));
    res[lens][lenp] = 1;
    for(int i = lens;i>=0;i--){
        for(int j = lenp-1;j>=0;j--){
            bool cur = p[j]==s[i]?1:0;
            if(p[j]=='?'&&i<lens) res[i][j] = res[i+1][j+1];
            else if(p[j]=='*') res[i][j] = j==lenp?1:(i==lens?res[i][j+1]:res[i+1][j]|res[i+1][j+1]|res[i][j+1]);
            else if(i<lens) res[i][j] = cur&res[i+1][j+1];
        }
    }
    bool result = res[0][0];
    for(int i = 0;i<lens+1;i++) free(res[i]);
    free(res);
    return result;
}

//4ms 暴力解法
bool isMatch(const char *s, const char *p) {
        const char* star=NULL;
        const char* ss=s;
        while (*s){
            if ((*p=='?')||(*p==*s)){s++;p++;continue;} 
            if (*p=='*'){star=p++; ss=s;continue;} 
            if (star){ p = star+1; s=++ss;continue;} 
            return false;
        }
        while (*p=='*'){p++;}
        return !*p;  
    }
