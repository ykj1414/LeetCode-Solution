//0ms 7M

void helper(int num,char *res){
    if(num>3999||num<1) *res='\0';
    if(num>=1000&&num<4000){
        *res++='M';
        helper(num-1000,res);
    }
    else if(num>=900&&num<1000){
        *res++='C';
        *res++='M';
        helper(num-900,res);
    }
    else if(num>=500&&num<900){
        *res++='D';
        helper(num-500,res);
    }
    else if(num>=400&&num<500){
        *res++='C';
        *res++='D';
        helper(num-400,res);
    }
    else if(num>=100&&num<400){
        *res++='C';
        helper(num-100,res);
    }
    else if(num>=90&&num<100){
        *res++='X';
        *res++='C';
        helper(num-90,res);
    }
    else if(num>=50&&num<90){
        *res++='L';
        helper(num-50,res);
    }
    else if(num>=40&&num<50){
        *res++='X';
        *res++='L';
        helper(num-40,res);
    }
    else if(num>=10&&num<40){
        *res++='X';
        helper(num-10,res);
    }
    else if(num==9){
        *res++='I';
        *res++='X';
        helper(num-9,res);
    }
    else if(num>=5&&num<9){
        *res++='V';
        helper(num-5,res);
    }
    else if(num==4){
        *res++='I';
        *res++='V';
        helper(num-4,res);
    }
    else if(num>=1&&num<4){
        *res++='I';
        helper(num-1,res);
    }
}

char * intToRoman(int num){
    char *res = (char*)malloc(sizeof(char)*20);
    //res[0] = '\0';
    helper(num,res);
    return res;
}
