/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
// void quicksort(int **p,int start,int end){
//     //printf("%d,%d,%d,%d\n",start,end,p[start][0],p[start][1]);
//     if(start>=end) return;
//     int k1 = p[start][0],k2 = p[start][1];
//     int i = start+1;
//     int j = end-1;
//     int s = start;
//     while(i<j){
//         while(p[j][0]<=k1){
//             if(j--<=i) goto ReCur;
//             if(p[j][0]==k1&&p[j][1]>k2) break;
//         }
//         p[s][0] = p[j][0];
//         p[s][1] = p[j][1];
//         p[j][0] = k1;
//         p[j][1] = k2;
//         s = j;
//         while(p[i][0]>=k1){
//             if(i++>=j) goto ReCur;
//             if(p[i][0]==k1&&p[i][1]<k2) break;
//         }
//         p[s][0] = p[i][0];
//         p[s][1] = p[i][1];
//         p[i][0] = k1;
//         p[i][1] = k2;
//         s = i;
//     }
//     ReCur:
//     {quicksort(p,start,s);
//      quicksort(p,s+1,end);}
// }

int cmpType(const void *a,const void *b){
    int *l = *(int**)a;
    int *r = *(int**)b;
    if(l[0]==r[0]) return l[1]-r[1];
    else return r[0]-l[0];
}

int** reconstructQueue(int** people, int pRS, int *pCS, int* rS) {
    int **res = (int**)malloc(sizeof(int*)*pRS);
    for(int i = 0;i<pRS;i++) res[i] = (int*)calloc(2,sizeof(int));
    qsort(people,pRS,sizeof(int*),cmpType);
    for(int i = 0;i<pRS;i++){
        if(people[i][1]<i){
            for(int j = i;j>people[i][1];j--){
                res[j][0] = res[j-1][0];
                res[j][1] = res[j-1][1];
            }
        }
        res[people[i][1]][0] = people[i][0];
        res[people[i][1]][1] = people[i][1];
    }
    *rS = pRS;
    return res;
}
