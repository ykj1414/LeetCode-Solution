//4ms 7.3M内存解法，使用系统自带的qsort函数，对compare函数自定义即可

void intToStr(char *p,int len,int num){
    p[len] = '\0';
    if(num==0) p[0] = 48;
    else{
        while(num){
            p[--len] = num%10+48;
            num/=10;
        }
    }
}

int compareType(void *a,void*b){
    char *l = *(char**)a;
    char *r = *(char**)b;
    int min_len = 0;
    while(*l&&*r){
        if(*l<*r) return 1;
        else if(*l>*r) return -1;
        min_len++;
        l++;
        r++;
    }
    if(*l){
        r = *(char**)b;
        int i = 0;
        while(*l){
            if(*l<r[i%min_len]) return 1;
            else if(*l>r[i%min_len]) return -1;
            l++;
            i++;
        }
        if(min_len==1) return 0;
        i%=min_len;
        while(r[i]){
            if(r[i-1]<r[i]) return 1;
            else if(r[i-1]>r[i]) return -1;
            i++;
        }
        return 0;
    }
    else if(*r){
        l = *(char**)a;
        int i = 0;
        while(*r){
            if(*r<l[i%min_len]) return -1;
            else if(*r>l[i%min_len]) return 1;
            r++;
            i++;
        }
        if(min_len==1) return 0;
        i%=min_len;
        while(l[i]){
            if(l[i-1]<l[i]) return -1;
            else if(l[i-1]>l[i]) return 1;
            i++;
        }
        return 0;
    }
    else return 0;
}

char * largestNumber(int* nums, int numsSize){
    char **p = (char**)malloc(sizeof(char*)*numsSize);
    int len = 0;
    for(int i = 0;i<numsSize;i++){
        int j = 0;
        int k = nums[i];
        while(++j){
            if(k/10==0) break;
            else k/=10;
        }
        p[i] = (char*)malloc(sizeof(char)*(j+1));
        intToStr(p[i],j,nums[i]);
        len+=j;
    }
    qsort(p,numsSize,sizeof(p[0]),compareType);
    char *result = (char*)malloc(sizeof(char)*(len+1));
    result[len] = '\0';
    char *r = result;
    for(int i = 0;i<numsSize;i++){
        char *c = p[i];
        while(*c){
            *r++=*c++;
        }
        free(p[i]);
    }
    free(p);
    if(result[0]=='0') result[1] = '\0';
    return result;
}


//4ms radix sort 基数排序算法
typedef unsigned char byte;

void numToDigits(int num, byte digits[]) {
	static int num_stack[32];
	int top = -1;
	int i = 1;
	
	if (num == 0) {
		digits[0] = 1;
		return;
	}
	
	while (num) {
		num_stack[++top] = num % 10;
		num /= 10;	
	}
	
	digits[0] = top+1;
	
	while (top > -1) {
		digits[i++] = num_stack[top--];	
	}
}

void radixsort(byte **num, int n, int digit, int len_max) {
	byte *tmp[n];
	
	int count[10], count2[10];
	int i, k;
	
	memset(count, 0, sizeof(count));
	memset(count2, 0, sizeof(count2));
	
	for (i = 0; i < n; ++ i) {
		k = num[i][0];
		if (digit > k)
			num[i][digit] = num[i][digit%k? digit%k: k];
		k = num[i][digit];
		++ count[k];
		++ count2[k];
	}
	
	
	for (i = 1; i < 10; ++ i) {
		count[i] += count[i-1];
		count2[i] += count2[i-1];
	}
	
	for (i = n-1; i >= 0; -- i) {
		k = num[i][digit];
		tmp[count[k]-1] = num[i];
		-- count[k];
	}
	for (i = 0; i < n; ++ i) {
		num[i] = tmp[i];
	}
// recursive
	if (count2[0] > 0 && digit <= len_max)
		radixsort(num, count2[0], digit+1, len_max);
	for (i = 1; i < 10; ++ i) {
		if (count2[i] > count2[i-1] + 1 && digit <= len_max) {
			radixsort(num+count2[i-1], count2[i]-count2[i-1], digit+1, len_max);
		}
	}
}

char *largestNumber(int *num, int n) {
	int i, j, length, len_max;
	char *result, *p;
	
	byte *digits[n];
	
	length = 0;
	len_max = 0;
	for (i = 0; i < n; ++ i) {
		digits[i] = (byte*)malloc(sizeof(byte)*32);
		memset(digits[i], 0, sizeof(byte)*32);
		numToDigits(num[i], digits[i]);
		len_max = len_max > digits[i][0]? len_max: digits[i][0];
		length += digits[i][0];
	}
	radixsort(digits, n, 1, len_max);
	
	result = (char*)malloc(sizeof(char)*(length+1));
	p = result;
	
	for (i = n-1; i >= 0; -- i) {
		for (j = 1; j <= digits[i][0]; ++ j)
			*p++ = digits[i][j] + '0';
	}
	*p = '\0';
	
	for (i = 0; i < n; ++ i) {
		free(digits[i]);
	}
	if (*result == '0') *(result+1) = '\0'; 
	return result;
}
