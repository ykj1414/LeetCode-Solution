//120ms 9M AC  虽然做出来了 但是速度和内存都不好，本来想着用堆排序的思路，但是好像写着写着成类似归并了。。。
/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
typedef struct heap{
    int val;
    int freq;
}TH;

void heapComeUp(struct heap *root,struct heap *cur,int index){
    //printf("%d,%d\n",root->val,cur->val);
    struct heap *p = root+index;
    if(index==0) return;
    if(p->freq>=cur->freq){
        index = cur-p;
        heapComeUp(p,cur,index/2);
    }
    else{
        //printf("%d,%d\n",root->val,cur->val);
        int tempf = p->freq;
        int tempv = p->val;
        p->val = cur->val;
        p->freq = cur->freq;
        cur->val = tempv;
        cur->freq = tempf;
        heapComeUp(root,p,index/2);
    }
}

int* topKFrequent(int* nums, int nS, int k, int* rS) {
    TH *p = (TH*)calloc(nS+1,sizeof(TH));
    int *res = (int*)calloc(k,sizeof(int));
    for(int i = 1;i<=nS;i++){
        TH *cur = p+1;
        while(cur->freq>0){
            if(cur->val==nums[i-1]){
                cur->freq++;
                goto doCome;
            }
            cur++;
        }
        cur->val = nums[i-1];
        cur->freq = 1;
        doCome:heapComeUp(p,cur,(cur-p)/2);
    }
    for(int i = 0;i<k;i++) {
        res[i] = p[i+1].val;
    }
    free(p);
    *rS = k;
    return res;
}
