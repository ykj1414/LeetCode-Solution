int lengthOfLongestSubstring(char* str) {
    
    int n = strlen(str); 
    
    if(!n) return 0;
    
    int L_len = 1;          // lenght of longest substring, initialize to 1
    int C_len = 1;          // lenght of current substring, initialize to 1
    
    int P_ind, i;           //  P_ind for previous index
    
    
	    
    short visited[256];     //  visited will keep track of visiting char for the last instance.
                            //  since there are 256 ASCII char, its size is limited to that value.
     
    for (i = 0; i < 256;  i++)
        visited[i] = -1;        //  -1 means the char is not visited yet.
     
    visited[str[0]] = 0;        //  the index of that char will tell us that when it was visited.
 
    
    for (i = 1; i < n; i++)
    {
        P_ind =  visited[str[i]];	//	if str[0] & str[1] are same then P_ind will be 0
 
        
        if (P_ind == -1 || i - C_len > P_ind)
            C_len++;        //  if the current char was not visited earlier, or it is not the part of current substring
 
        
        else
        {                           //  otherwise, we need to change the current/longest substring length
            
            if (C_len > L_len) L_len = C_len;
 
            C_len = i - P_ind;
        }
 
        visited[str[i]] = i;
    }
 
    if (C_len > L_len) L_len = C_len;
        
    
    return L_len;       //  this is the longest substring length
       
}
