int lengthOfLIS(int* nums, int numsSize) {
    if(numsSize<1) return 0 ;
    int *dp = (int*)malloc(sizeof(int)*numsSize);
    for(int i = 0;i<numsSize;i++) dp[i] = 1;    //每个元素都是一个长度1的递增子序列
    for(int i = 0;i<numsSize;i++){
        for(int j = 0;j<i;j++){
            if(nums[j]<nums[i]){
                //如果当前项小于i，判断当前项之前是否有项小于i项。
                //如果有那么dp[i]必然大于1,但是相对于d[j]来说，d[i]项只是增加一项递增项
                //所以使用dp[i]>1+dp[j]，remarkable；
                //再往后看，就很容易理解，如果前面表达式为否，更新dp[i]=dp[j]+1即可
                dp[i] = dp[i]>1+dp[j]?dp[i]:dp[j]+1;
            }
        }
    }
    int max = 0;
    for(int j = 0;j<numsSize;j++){
        max = max<dp[j]?dp[j]:max;
    }
    return max;
}
